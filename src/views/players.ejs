<%- include('components/header') %>

<main class="container team-page">
    <!-- Team Header Section -->
    <section class="team-header">
        <div class="breadcrumb-nav">
            <a href="/teams" class="breadcrumb-link">Teams</a>
            <span class="breadcrumb-separator">/</span>
            <span class="breadcrumb-current"><%= team.name %></span>
        </div>

        <div class="action-buttons">
            <button class="btn btn-secondary" onclick="window.location.href='/teams'">
                <i class="fas fa-arrow-left"></i> Back to Teams
            </button>

            <% if(user){ %>
                <button id="addPlayerButton" class="btn btn-primary" onclick="event.preventDefault(); event.stopPropagation(); openAddModalP(event)">
                    <i class="fas fa-plus"></i> Add Player
                </button>
            <% } %>
        </div>
    </section>

    <!-- Main Team Card -->
    <section class="team-card-section">
        <div class="welcome-section">
            <h1><%= team.name %></h1>
            <div class="team-details">
                <p><i class="fas fa-map-marker-alt"></i> <%= team.location %></p>
                <p><i class="fas fa-star"></i> Rank: #<%= team.rank %></p>
                <div class="team-rank">
                    <%= team.category || 'Senior Team' %>
                </div>
            </div>
        </div>
    </section>

    <!-- Players Section -->
    <section class="players-section">
        <h2 class="section-title">
            <i class="fas fa-users"></i> Players
            <span class="badge"><%= players ? players.length : 0 %></span>
        </h2>

        <% if(players && players.length > 0){ %>
            <div class="players-grid">
                <% players.forEach(player => { %>
                    <div class="player-card">
                        <div class="player-header">
                            <div class="player-number"><%= player.number %></div>
                            <div class="player-name"><%= player.name %></div>
                        </div>
                        <div class="player-details">
                            <div class="player-detail">
                                <span class="player-detail-label">Position</span>
                                <span><%= player.position %></span>
                            </div>
                            <div class="player-detail">
                                <span class="player-detail-label">Age</span>
                                <span><%= player.age %></span>
                            </div>
                            <div class="player-detail">
                                <span class="player-detail-label">Height</span>
                                <span><%= player.heightFeet %>'<%= player.heightInches %>"</span>
                            </div>
                        </div>
                        <% if(user){ %>
                            <div class="player-actions">
                                <button class="btn-icon btn-primary" onclick="openEditModalP('<%= player.id %>', '<%= player.name %>', '<%= player.number %>', '<%= player.position %>', '<%= player.heightFeet %>', '<%= player.heightInches %>', '<%= player.age %>')">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn-icon btn-danger" onclick="openDeleteModalP('<%= player.id %>', '<%= player.name %>')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        <% } %>
                    </div>
                <% }) %>
            </div>
        <% } else { %>
            <div class="empty-state">
                <i class="fas fa-users-slash"></i>
                <h3>No Players Yet</h3>
                <p>This team currently has no players. <% if(user){ %>Add one to get started!<% } %></p>
                <% if(user){ %>
                    <button id="addPlayerButtonEmpty" class="btn btn-primary" onclick="event.preventDefault(); event.stopPropagation(); openAddModalP(event)">
                        Add Player
                    </button>
                <% } %>
            </div>
        <% } %>
    </section>
</main>

<!-- Add Player Modal -->
<div id="addPlayerModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Add New Player</h3>
            <button class="modal-close" onclick="closeModalP()">&times;</button>
        </div>
        <form id="addPlayerForm">
            <input type="hidden" name="team_id" value="<%= team.id %>">

            <div class="form-group">
                <label for="name">Full Name</label>
                <input type="text" id="name" name="name" class="form-control" placeholder="Player's full name" required />
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="number">Jersey Number</label>
                    <input type="number" id="number" name="number" class="form-control" placeholder="00" min="0" max="99" required />
                </div>
                
                <div class="form-group">
                    <label for="age">Age</label>
                    <input type="number" id="age" name="age" class="form-control" placeholder="Age" min="12" max="60" required />
                </div>
            </div>
            
            <div class="form-group">
                <label for="position">Position</label>
                <select id="position" name="position" class="form-control" required>
                    <option value="" disabled selected>Select Position</option>
                    <% ['Setter', 'Libero', 'Outside Hitter', 'Middle Blocker', 'Opposite'].forEach(pos => { %>
                        <option value="<%= pos %>"><%= pos %></option>
                    <% }) %>
                </select>
            </div>
            
            <div class="form-group">
                <label>Height</label>
                <div class="height-inputs">
                    <div class="height-input">
                        <input type="number" id="heightFeet" name="heightFeet" class="form-control" placeholder="Feet" min="4" max="7" required />
                        <span>ft</span>
                    </div>
                    <div class="height-input">
                        <input type="number" id="heightInches" name="heightInches" class="form-control" placeholder="Inches" min="0" max="11" required />
                        <span>in</span>
                    </div>
                </div>
            </div>

            <div class="form-actions">
                <button type="button" class="btn btn-secondary" onclick="closeModalP()">Cancel</button>
                <button type="submit" class="btn btn-primary">Add Player</button>
            </div>
        </form>
    </div>
</div>

<!-- Edit Player Modal -->
<div id="editPlayerModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Edit Player</h3>
            <button class="modal-close" onclick="closeModalP()">&times;</button>
        </div>
        <form id="editPlayerForm">
            <input type="hidden" name="id" id="editPlayerId"/>

            <div class="form-group">
                <label for="editPlayerName">Full Name</label>
                <input type="text" id="editPlayerName" name="name" class="form-control" required />
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="editPlayerNumber">Jersey Number</label>
                    <input type="number" id="editPlayerNumber" name="number" class="form-control" min="0" max="99" required />
                </div>
                
                <div class="form-group">
                    <label for="editPlayerAge">Age</label>
                    <input type="number" id="editPlayerAge" name="age" class="form-control" min="12" max="60" required />
                </div>
            </div>
            
            <div class="form-group">
                <label for="editPlayerPosition">Position</label>
                <select id="editPlayerPosition" name="position" class="form-control" required>
                    <option value="" disabled>Select Position</option>
                    <% ['Setter', 'Libero', 'Outside Hitter', 'Middle Blocker', 'Opposite'].forEach(pos => { %>
                        <option value="<%= pos %>"><%= pos %></option>
                    <% }) %>
                </select>
            </div>
            
            <div class="form-group">
                <label>Height</label>
                <div class="height-inputs">
                    <div class="height-input">
                        <input type="number" id="editPlayerHeightFeet" name="heightFeet" class="form-control" min="4" max="7" required />
                        <span>ft</span>
                    </div>
                    <div class="height-input">
                        <input type="number" id="editPlayerHeightInches" name="heightInches" class="form-control" min="0" max="11" required />
                        <span>in</span>
                    </div>
                </div>
            </div>
            
            <div class="form-group">
                <label for="editPlayerTeam">Team</label>
                <select id="editPlayerTeam" name="newTeamId" class="form-control" required>
                    <% teams.forEach(steam => { %>
                        <% if(steam.id == team.id){ %>
                            <option value="<%= steam.id %>" selected><%= steam.name %></option>
                        <% }else{ %>
                            <option value="<%= steam.id %>"><%= steam.name %></option>
                        <% } %>
                    <% }); %>
                </select>
            </div>

            <div class="form-actions">
                <button type="button" class="btn btn-secondary" onclick="closeModalP()">Cancel</button>
                <button type="submit" class="btn btn-primary">Update Player</button>
            </div>
        </form>
    </div>
</div>

<!-- Delete Player Modal -->
<div id="deletePlayerModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Confirm Deletion</h3>
            <button class="modal-close" onclick="closeModalP()">&times;</button>
        </div>
        <form id="deletePlayerForm">
            <input type="hidden" name="id" id="deletePlayerId"/>
            
            <div class="modal-body">
                <div class="warning-message">
                    <i class="fas fa-exclamation-triangle"></i>
                    <p id="deleteConfirmationText">Are you sure you want to delete this player? This action cannot be undone.</p>
                </div>
            </div>

            <div class="form-actions">
                <button type="button" class="btn btn-secondary" onclick="closeModalP()">Cancel</button>
                <button type="submit" class="btn btn-danger">Delete Player</button>
            </div>
        </form>
    </div>
</div>


<script>
    let team = <%- JSON.stringify(team) %>;

    function openAddModalP() {
        document.getElementById("addPlayerModal").classList.add("show");
    }

    function openDeleteModalP(playerId, name) {
        document.getElementById("deletePlayerId").value = playerId;
        document.getElementById("deleteConfirmationText").textContent = `Are you sure you want to delete ${name}? This action cannot be undone.`;
        
        document.getElementById("deletePlayerModal").classList.add("show");
    }

    function openEditModalP(playerId, name, number, position, heightFeet, heightInches, age) {
        console.log(playerId, heightFeet, heightInches);
        document.getElementById("editPlayerId").value = playerId;
        document.getElementById("editPlayerName").value = name;
        document.getElementById("editPlayerNumber").value = number;
        document.getElementById("editPlayerPosition").value = position;
        document.getElementById("editPlayerHeightFeet").value = heightFeet;
        document.getElementById("editPlayerHeightInches").value = heightInches;
        document.getElementById("editPlayerAge").value = age;

        document.getElementById("editPlayerModal").classList.add("show");
    }

    function closeModalP() {
        document.getElementById("addPlayerModal").classList.remove("show");
        document.getElementById("editPlayerModal").classList.remove("show");
        document.getElementById("deletePlayerModal").classList.remove("show");
    }

    document.addEventListener("click", function(event) {
        if (event.target.tagName === "BUTTON" || event.target.closest("button")) {
            return;
        }

        let modals = ['addPlayerModal', 'editPlayerModal', 'deletePlayerModal'];
        modals.forEach(modalId => {
            let modal = document.getElementById(modalId);
            let modalContent = document.querySelector(`#${modalId} .modal-content`);
            if (modal.classList.contains("show") && 
                !modalContent.contains(event.target) && 
                !event.target.classList.contains('modal-close') && 
                !event.target.closest('.modal-close')) {
                closeModalP();
            }
        });
    });

    // Form validation for add player
    document.getElementById('addPlayerForm')?.addEventListener('submit', function(e) {
        const feet = parseInt(document.getElementById('heightFeet').value);
        const inches = parseInt(document.getElementById('heightInches').value);
        
        if (inches >= 12) {
            e.preventDefault();
            alert('Inches must be less than 12');
            return false;
        }
        
        if (feet < 4 || feet > 7) {
            e.preventDefault();
            alert('Height must be between 4 and 7 feet');
            return false;
        }
    });

    // Form validation for edit player
    document.getElementById('editPlayerForm')?.addEventListener('submit', function(e) {
        const feet = parseInt(document.getElementById('editPlayerHeightFeet').value);
        const inches = parseInt(document.getElementById('editPlayerHeightInches').value);
        
        if (inches >= 12) {
            e.preventDefault();
            alert('Inches must be less than 12');
            return false;
        }
        
        if (feet < 4 || feet > 7) {
            e.preventDefault();
            alert('Height must be between 4 and 7 feet');
            return false;
        }
    });


    addPlayerForm.addEventListener('submit', async function (e) {
        e.preventDefault();
        const form = e.target;
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch(`/teams/${team.id}/players/add`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            if (response.ok) {
                window.location.reload();
            } else {
                const error = await response.json();
                alert(error.message || 'Failed to add player');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('An error occurred while adding the player');
        }
    });

    editPlayerForm.addEventListener('submit', async function (e) {
        e.preventDefault();
        const form = e.target;
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch(`/teams/${team.id}/players/edit`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            if (response.ok) {
                window.location.reload();
            } else {
                const error = await response.json();
                alert(error.message || 'Failed to update player');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('An error occurred while updating the player');
        }
    });

    deletePlayerForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        const form = e.target;
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch(`/teams/${team.id}/players/delete`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            if (response.ok) {
                window.location.reload();
            } else {
                const error = await response.json();
                alert(error.message || 'Failed to delete player');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('An error occurred while deleting the player');
        }
    });
</script>

<%- include('components/footer') %>